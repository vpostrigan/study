https://www.linkedin.com/learning/elasticsearch-essential-training
1)
Install ElasticSearch
Install Kibana
Install cerebro

http://127.0.0.1:5601/app/dev_tools#/console
http://127.0.0.1:9000/#!/rest?host=http:%2F%2Flocalhost:9200


2) In Kibana:  http://127.0.0.1:5601/app/dev_tools#/console

## Overall Cluster Health
GET /_cat/health?v

Response:
epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1634239011 19:16:51  elasticsearch yellow          1         1     14  14    0    0        6             0                  -                 70.

## Node Health
GET /_cat/nodes?v

Response:
ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name
127.0.0.1           32          84  13                          cdfhilmrstw *      VLADIMIRP

## List Indices
GET _cat/indices?v
Response:
health status index                         pri rep docs.count docs.deleted store.size pri.store.size
green  open   .geoip_databases                1   0         43           39     40.7mb         40.7mb
green  open   .apm-custom-link                1   0          0            0       208b           208b
green  open   .kibana_task_manager_1          1   0          5          601    214.6kb        214.6kb
green  open   .apm-agent-configuration        1   0          0            0       208b           208b
green  open   .kibana_1                       1   0         38            2      2.1mb          2.1mb
green  open   .kibana-event-log-7.10.2-000001 1   0          3            0     16.4kb         16.4kb

## Create 'sales' Index
PUT /sales
Response:
{
  "acknowledged" : true,
  "shards_acknowledged" : true,
  "index" : "sales"
}

## Add 'order' to 'sales' index
PUT /sales/order/123
{
  "orderID":"123",
  "orderAmount":"500"
}
Response:
{
  "_index" : "sales",
  "_type" : "order",
  "_id" : "123",
  "_version" : 1,
  "result" : "created",
  "_shards" : {
    "total" : 2,
    "successful" : 1,
    "failed" : 0
  },
  "_seq_no" : 0,
  "_primary_term" : 1
}

## Retrieve document
GET /sales/order/123
Response:
{
  "_index" : "sales",
  "_type" : "order",
  "_id" : "123",
  "_version" : 2,
  "_seq_no" : 1,
  "_primary_term" : 1,
  "found" : true,
  "_source" : {
    "orderID" : "123",
    "orderAmount" : "500"
  }
}

## Delete index
DELETE sales
Response:
{
  "acknowledged" : true
}

3) Bulk loading data

a) # Create File 'reqs' with Requests (make sure to include new line at end of file)
{ "index" : { "_index" : "my-test", "_type" : "my-type", "_id" : "1" } }
{ "col1" : "val1"}
{ "index" : { "_index" : "my-test", "_type" : "my-type", "_id" : "2" } }
{ "col1" : "val2"}
{ "index" : { "_index" : "my-test", "_type" : "my-type", "_id" : "3" } }
{ "col1" : "val3" }

# Load from CURL
curl -s -H "Content-Type: application/x-ndjson" -XPOST localhost:9200/_bulk --data-binary "@reqs"; echo

# Check Kibana
GET /my-test
GET /my-test/my-type/1

b) # Load from Console
POST _bulk
{ "index" : { "_index" : "my-test-console", "_type" : "my-type", "_id" : "1" } }
{ "col1" : "val1" }
{ "index" : { "_index" : "my-test-console", "_type" : "my-type", "_id" : "2" } }
{ "col1" : "val2"}
{ "index" : { "_index" : "my-test-console", "_type" : "my-type", "_id" : "3" } }
{ "col1" : "val3" }

# Check Kibana
GET /my-test-console
GET /my-test-console/my-type/1

4) Index pattern in Kibana
# Load via curl, notice the endpoint and type
curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/bank/account/_bulk?pretty' --data-binary @accounts.json

# check inside ES
GET /_cat/indices
GET /bank

Response:
{
  "bank" : {
    "aliases" : { },
    "mappings" : {
      "properties" : {
        "account_number" : {
          "type" : "long"
        },
        "address" : {
          "type" : "text",
          "fields" : {

# set index pattern in Kibana
Management -> Index Patterns
write name: bank
uncheck 'Index contains time-based events'.
click 'create'

3.3) Setting data types

PUT /logstash-2015.05.18
{
  "mappings": {
      "properties": {
        "geo": {
          "properties": {
            "coordinates": {
              "type": "geo_point"
            }
          }
        }
      }
  }
}
the same PUT /logstash-2015.05.19
PUT /logstash-2015.05.20

# Import log files
curl -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/_bulk?pretty' --data-binary @logs.jsonl

# Check ES for data
GET /_cat/indices/logstash-*

Response:
yellow open logstash-2015.05.20 zSWeMvZ_ToKqJdcbxOeq_g 1 1 4750 0 12.2mb 12.2mb
yellow open logstash-2015.05.18 qIpqyDbsQcqkKD21I9YBlQ 1 1 4634 0   12mb   12mb
yellow open logstash-2015.05.19 vqPMvF-vRa-00ZmMUy6GuQ 1 1 4624 0   12mb   12mb

4) Querying Data
4.1) Simple queries
# show me everything
GET /bank/_search

Response:
{
  "took" : 5,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1000,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "1",
        "_score" : 1.0,
        "_source" : {
          "account_number" : 1,
          "balance" : 39225,
          "firstname" : "Amber",
          "lastname" : "Duke",
          "age" : 32,
          "gender" : "M",
          "address" : "880 Holmes Lane",
          "employer" : "Pyrami",
          "email" : "amberduke@pyrami.com",
          "city" : "Brogan",
          "state" : "IL"
        }
      },

# find CA accounts only
GET /bank/_search
{
  "query": {
    "match": {
      "state": "IL"
  }}
}

Response:
  "hits" : {
    "total" : {
      "value" : 22,
      "relation" : "eq"
    },
    "max_score" : 3.7952394,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "1",
        "_score" : 3.7952394,
        "_source" : {
          "account_number" : 1,
          "balance" : 39225,
          "firstname" : "Amber",
          "lastname" : "Duke",
          "age" : 32,
          "gender" : "M",
          "address" : "880 Holmes Lane",
          "employer" : "Pyrami",
          "email" : "amberduke@pyrami.com",
          "city" : "Brogan",
          "state" : "IL"
        }
      },

# find "Techade" accounts in CA only
GET bank/account/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": {"state": "CA"} },
        { "match": {"employer": "Techade"}}
      ]
    }
  }
}

Response:
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 10.552503,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "413",
        "_score" : 10.552503,
        "_source" : {
          "account_number" : 413,
          "balance" : 15631,
          "firstname" : "Pugh",
          "lastname" : "Hamilton",
          "age" : 39,
          "gender" : "F",
          "address" : "124 Euclid Avenue",
          "employer" : "Techade",
          "email" : "pughhamilton@techade.com",
          "city" : "Beaulieu",
          "state" : "CA"
        }
      }
    ]
  }

# find non "Techade" accounts outside of CA
GET bank/account/_search
{
  "query": {
    "bool": {
      "must_not": [
        { "match": {"state": "CA"} },
        { "match": {"employer": "Techade"}}
      ]
    }
  }
}

Response:
  "hits" : {
    "total" : {
      "value" : 983,
      "relation" : "eq"
    },
    "max_score" : 0.0,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "1",
        "_score" : 0.0,
        "_source" : {
          "account_number" : 1,
          "balance" : 39225,
          "firstname" : "Amber",
          "lastname" : "Duke",
          "age" : 32,
          "gender" : "M",
          "address" : "880 Holmes Lane",
          "employer" : "Pyrami",
          "email" : "amberduke@pyrami.com",
          "city" : "Brogan",
          "state" : "IL"
        }
      },

# Boost results for Smith
GET bank/account/_search
{
  "query": {
    "bool": {
      "should": [
        { "match": {"state": "CA"} },
        { "match": {
          "lastname": {
            "query": "Smith",
            "boost": 3
            }
          }
        }
      ]
    }
  }
}

Response:
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "516",
        "_score" : 19.509869,
        "_source" : {
          "account_number" : 516,
          "balance" : 44940,
          "firstname" : "Roy",
          "lastname" : "Smith",
          "age" : 37,
          "gender" : "M",
          "address" : "770 Cherry Street",
          "employer" : "Parleynet",
          "email" : "roysmith@parleynet.com",
          "city" : "Carrsville",
          "state" : "RI"
        }
      },
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "68",
        "_score" : 4.046554,
        "_source" : {
          "account_number" : 68,
          "balance" : 44214,
          "firstname" : "Hall",
          "lastname" : "Key",
          "age" : 25,
          "gender" : "F",
          "address" : "927 Bay Parkway",
          "employer" : "Eventex",
          "email" : "hallkey@eventex.com",
          "city" : "Shawmut",
          "state" : "CA"
        }
      },

4.2) Term-level queries
# Term Query
GET bank/account/_search
{
  "query": {
    "term": {
      "account_number": 516
    }
  }
}

Response:
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "516",
        "_score" : 1.0,
        "_source" : {
          "account_number" : 516,
          "balance" : 44940,
          "firstname" : "Roy",
          "lastname" : "Smith",
          "age" : 37,
          "gender" : "M",
          "address" : "770 Cherry Street",
          "employer" : "Parleynet",
          "email" : "roysmith@parleynet.com",
          "city" : "Carrsville",
          "state" : "RI"
        }
      }

# Returns null because "state" is a text field (hence not an exact match)
GET bank/account/_search
{
  "query": {
    "term": {
      "state": "RI"
    }
  }
}
Response:
  "hits" : {
    "total" : {
      "value" : 0,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  }

# This works because it uses the "analysis" process
GET bank/account/_search
{
  "query": {
    "match": {
      "state": "RI"
    }
  }
}
Response:
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "49",
        "_score" : 3.990984,
        "_source" : {
          "account_number" : 49,
          "balance" : 29104,
          "firstname" : "Fulton",
          "lastname" : "Holt",
          "age" : 23,
          "gender" : "F",
          "address" : "451 Humboldt Street",
          "employer" : "Anocha",
          "email" : "fultonholt@anocha.com",
          "city" : "Sunriver",
          "state" : "RI"
        }
      },

# Terms can return multiple results
GET bank/account/_search
{
  "query": {
    "terms": {
      "account_number": [516,851]
    }
  }
}

# Range Queries
## gte = Greater-than or equal to
## gt = Greater-than
## lte = Less-than or equal to
## lt = Less-than

# Show all accounts between 516 and 851, boosting the importance
GET bank/account/_search
{
  "query": {
    "range": {
      "account_number": {
        "gte": 516,
        "lte": 851,
        "boost": 2
      }
    }
  }
}
Response:
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "518",
        "_score" : 2.0,
        "_source" : {
          "account_number" : 518,
          "balance" : 48954,
          "firstname" : "Finch",
          "lastname" : "Curtis",
          "age" : 29,
          "gender" : "F",
          "address" : "137 Ryder Street",
          "employer" : "Viagrand",
          "email" : "finchcurtis@viagrand.com",
          "city" : "Riverton",
          "state" : "MO"
        }
      },

# Show all account holders older than 35
GET bank/account/_search
{
  "query": {
    "range": {
      "age": {
        "gt": 35
      }
    }
  }
}

4.3) Analysis and tokenization
# Basic Example
GET bank/_analyze
{
  "tokenizer" : "standard",
  "text" : "The Moon is Made of Cheese Some Say"
}
Response:
{
  "tokens" : [
    {
      "token" : "The",
      "start_offset" : 0,
      "end_offset" : 3,
      "type" : "<ALPHANUM>",
      "position" : 0
    },
    {
      "token" : "Moon",
      "start_offset" : 4,
      "end_offset" : 8,
      "type" : "<ALPHANUM>",
      "position" : 1
    },
    {
      "token" : "is",
      "start_offset" : 9,
      "end_offset" : 11,
      "type" : "<ALPHANUM>",
      "position" : 2
    },

# Mixed String
GET bank/_analyze
{
  "tokenizer" : "standard",
  "text" : "The Moon-is-Made of Cheese.Some Say$"
}
Response:
{
  "tokens" : [
    {
      "token" : "The",
      "start_offset" : 0,
      "end_offset" : 3,
      "type" : "<ALPHANUM>",
      "position" : 0
    },
    {
      "token" : "Moon",
      "start_offset" : 4,
      "end_offset" : 8,
      "type" : "<ALPHANUM>",
      "position" : 1
    },
    {
      "token" : "is",
      "start_offset" : 9,
      "end_offset" : 11,
      "type" : "<ALPHANUM>",
      "position" : 2
    },

# Set the letter tokenizer
GET bank/_analyze
{
  "tokenizer" : "letter",
  "text" : "The Moon-is-Made of Cheese.Some Say$"
}
Response:
{
  "tokens" : [
    {
      "token" : "The",
      "start_offset" : 0,
      "end_offset" : 3,
      "type" : "word",
      "position" : 0
    },
    {
      "token" : "Moon",
      "start_offset" : 4,
      "end_offset" : 8,
      "type" : "word",
      "position" : 1
    },
    {
      "token" : "is",
      "start_offset" : 9,
      "end_offset" : 11,
      "type" : "word",
      "position" : 2
    },

# How about a URL
GET bank/_analyze
{
  "tokenizer": "standard",
  "text": "you@example.com login at https://bensullins.com attempt"
}
Response:
{
  "tokens" : [
    {
      "token" : "you",
      "start_offset" : 0,
      "end_offset" : 3,
      "type" : "<ALPHANUM>",
      "position" : 0
    },
    {
      "token" : "example.com",
      "start_offset" : 4,
      "end_offset" : 15,
      "type" : "<ALPHANUM>",
      "position" : 1
    },
    {
      "token" : "login",
      "start_offset" : 16,
      "end_offset" : 21,
      "type" : "<ALPHANUM>",
      "position" : 2
    },

GET bank/_analyze
{
  "tokenizer": "uax_url_email",
  "text": "you@example.com login at https://bensullins.com attempt"
}
Response:
{
  "tokens" : [
    {
      "token" : "you@example.com",
      "start_offset" : 0,
      "end_offset" : 15,
      "type" : "<EMAIL>",
      "position" : 0
    },
    {
      "token" : "login",
      "start_offset" : 16,
      "end_offset" : 21,
      "type" : "<ALPHANUM>",
      "position" : 1
    },
    {
      "token" : "at",
      "start_offset" : 22,
      "end_offset" : 24,
      "type" : "<ALPHANUM>",
      "position" : 2
    },
    {
      "token" : "https://bensullins.com",
      "start_offset" : 25,
      "end_offset" : 47,
      "type" : "<URL>",
      "position" : 3
    },
    {
      "token" : "attempt",
      "start_offset" : 48,
      "end_offset" : 55,
      "type" : "<ALPHANUM>",
      "position" : 4
    }
  ]
}

# Where it breaks, two fields with diff analyzers
PUT /idx1
{
  "mappings": {
    "t1": {
      "properties": {
        "title": {
            "type": "text",
            "analyzer" : "standard"
        },
        "english_title": {
            "type":     "text",
            "analyzer": "english"
        }
      }
    }
  }
}

GET idx1

GET idx1/_analyze
{
  "field": "title",
  "text": "Bears"
}
Response:
{
  "tokens" : [
    {
      "token" : "bears",
      "start_offset" : 0,
      "end_offset" : 5,
      "type" : "<ALPHANUM>",
      "position" : 0
    }
  ]
}

GET idx1/_analyze
{
  "field": "english_title",
  "text": "Bears"
}
Response:
{
  "tokens" : [
    {
      "token" : "bear",
      "start_offset" : 0,
      "end_offset" : 5,
      "type" : "<ALPHANUM>",
      "position" : 0
    }
  ]
}

5) Analyzing Your Data
5.1) Basic aggregations
# Count of Accounts by State
# Must be keyword field
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      }
    }
  }
}

result:
  "aggregations" : {
    "states" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 743,
      "buckets" : [
        {
          "key" : "TX",
          "doc_count" : 30
        },
        {
          "key" : "MD",
          "doc_count" : 28
        },

# Add average balance in each state
# Nesting the metric inside the agg
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      },
      "aggs": {
        "avg_bal": {
          "avg": {
            "field": "balance"
          }
        }
      }
    }
  }
}

# Breakdown further with Nesting
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      },
      "aggs": {
        "avg_bal": {
          "avg": {
            "field": "balance"
          }
        },
        "gender":{
          "terms": {
            "field": "gender.keyword"
          }
        }
      }
    }
  }
}

Result:
  "aggregations" : {
    "states" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 743,
      "buckets" : [
        {
          "key" : "TX",
          "doc_count" : 30,
          "avg_bal" : {
            "value" : 26073.3
          },
          "gender" : {
            "doc_count_error_upper_bound" : 0,
            "sum_other_doc_count" : 0,
            "buckets" : [
              {
                "key" : "F",
                "doc_count" : 17,
                "avg_bal" : {
                  "value" : 29746.352941176472
                }
              },
              {
                "key" : "M",
                "doc_count" : 13,
                "avg_bal" : {
                  "value" : 21270.076923076922
                }
              }
            ]
          }
        },

# Add avg_price metric to lowest level
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      },
      "aggs": {
        "avg_bal": {
          "avg": {
            "field": "balance"
          }
        },
        "gender":{
          "terms": {
            "field": "gender.keyword"
          },
          "aggs": {"avg_bal": {"avg": {"field": "balance"} }
          }
        }
      }
    }
  }
}


## Get stats about bank balances
## Size=1 to omit search results
GET bank/account/_search
{
  "size": 1,
  "aggs": {
    "balance-stats": {
      "stats": {
        "field": "balance"
      }
    }
  }
}

Result:
  "hits" : {
    "total" : {
      "value" : 1000,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "1",
        "_score" : 1.0,
        "_source" : {
          "account_number" : 1,
          "balance" : 39225,
          "firstname" : "Amber",
          "lastname" : "Duke",
          "age" : 32,
          "gender" : "M",
          "address" : "880 Holmes Lane",
          "employer" : "Pyrami",
          "email" : "amberduke@pyrami.com",
          "city" : "Brogan",
          "state" : "IL"
        }
      }
    ]
  },
  "aggregations" : {
    "balance-stats" : {
      "count" : 1000,
      "min" : 1011.0,
      "max" : 49989.0,
      "avg" : 25714.837,
      "sum" : 2.5714837E7
    }
  }

5.2) Filtering aggregations

# Count of Accounts by State
# Must be keyword field
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      }
    }
  }
}

# This is the equivalent of using match_all
GET bank/account/_search
{
  "size": 0,
  "query": {
    "match_all": {}
  },
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      }
    }
  }
}

both returns:
  "aggregations" : {
    "states" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 743,
      "buckets" : [
        {
          "key" : "TX",
          "doc_count" : 30
        },
        {
          "key" : "MD",
          "doc_count" : 28
        },
...

# Aggs work in the context of the query, so apply a filter like normal
GET bank/account/_search
{
  "size": 0,
  "query": {
    "match": {
      "state.keyword": "CA"
    }
  },
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      }
    }
  }
}
returns:
  "aggregations" : {
    "states" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : "CA",
          "doc_count" : 17
        }
      ]
    }
  }

# You can also filter on terms (bool is multiple conditions to being match)
GET bank/account/_search
{
  "size": 0,
  "query": {
    "bool": {
      "must": [
        {"match": {"state.keyword": "CA"}},
        {"range": {"age": {"gt": 35}}}
      ]
    }
  },
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      }
    }
  }
}
returns:
  "hits" : {
    "total" : {
      "value" : 6,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "states" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : "CA",
          "doc_count" : 6
        }
      ]
    }
  }

# Lets add a metric back in
GET bank/account/_search
{
  "size": 0,
  "query": {
    "bool": {
      "must": [
        {"match": {"state.keyword": "CA"}},
        {"range": {"age": {"gt": 35}}}
      ]
    }
  },
  "aggs": {
    "states": {
      "terms": {
        "field": "state.keyword"
      },
      "aggs": {"avg_bal": {"avg": {"field": "balance"} }}
    }
  }
}
Return:
  "aggregations" : {
    "states" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : "CA",
          "doc_count" : 6,
          "avg_bal" : {
            "value" : 22794.166666666668
          }
        }
      ]
    }
  }

# You can also just filter the results
GET bank/account/_search
{
  "size": 0,
  "query": {
    "match": {"state.keyword": "CA"}
  },
  "aggs": {
    "over35":{
      "filter": {
        "range": {"age": {"gt": 35}}
      },
    "aggs": {"avg_bal": {"avg": {"field": "balance"} }}
    }
  }
}
Return:
  "aggregations" : {
    "over35" : {
      "doc_count" : 6,
      "avg_bal" : {
        "value" : 22794.166666666668
      }
    }
  }

# Look at state avg and global average
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "state_avg": {
      "terms": {
        "field": "state.keyword"
      },
      "aggs": {"avg_bal": {"avg": {"field": "balance"}}}
    },
    "global_avg": {
      "global": {},
      "aggs": {"avg_bal": {"avg": {"field": "balance"}}}
    }
  }
}
Return:
  "aggregations" : {
    "global_avg" : {
      "doc_count" : 1000,
      "avg_bal" : {
        "value" : 25714.837
      }
    },
    "state_avg" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 743,
      "buckets" : [
        {
          "key" : "TX",
          "doc_count" : 30,
          "avg_bal" : {
            "value" : 26073.3
          }
        },
        {
          "key" : "MD",
          "doc_count" : 28,
          "avg_bal" : {
            "value" : 26161.535714285714
          }
        },

5.3) Filtering aggregations

# Look at the percentiles for the balances
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "pct_balances": {
      "percentiles": {
        "field": "balance",
        "percents": [
          1,
          5,
          25,
          50,
          75,
          95,
          99
        ]
      }
    }
  }
}
Return:
  "aggregations" : {
    "pct_balances" : {
      "values" : {
        "1.0" : 1455.0,
        "5.0" : 3590.5,
        "25.0" : 13713.214285714286,
        "50.0" : 25999.375,
        "75.0" : 38186.5,
        "95.0" : 47601.5,
        "99.0" : 49347.0
      }
    }
  }

# Can also calculate High Dynamic Range (HDR) Historgram
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "pct_balances": {
      "percentiles": {
        "field": "balance",
        "percents": [
          1,
          5,
          25,
          50,
          75,
          95,
          99
        ],
        "hdr": {
          "number_of_significant_value_digits": 3
        }
      }
    }
  }
}
Return:
  "aggregations" : {
    "pct_balances" : {
      "values" : {
        "1.0" : 1447.5,
        "5.0" : 3589.5,
        "25.0" : 13679.5,
        "50.0" : 26015.5,
        "75.0" : 38175.5,
        "95.0" : 47551.5,
        "99.0" : 49343.5
      }
    }
  }

# We can use the percentile ranks agg for checking a individual values
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "bal_outlier": {
      "percentile_ranks": {
        "field": "balance",
        "values": [35000,50000],
        "hdr": {
          "number_of_significant_value_digits": 3
        }
      }
    }
  }
}
Return:
  "aggregations" : {
    "bal_outlier" : {
      "values" : {
        "35000.0" : 69.0,
        "50000.0" : 100.0
      }
    }
  }

# Similarly we can create a histogram
GET bank/account/_search
{
  "size": 0,
  "aggs": {
    "bals": {
      "histogram": {
        "field": "balance",
        "interval": 500
      }
    }
  }
}
Return:
  "aggregations" : {
    "bals" : {
      "buckets" : [
        {
          "key" : 1000.0,
          "doc_count" : 13
        },
        {
          "key" : 1500.0,
          "doc_count" : 6
        },
        {
          "key" : 2000.0,
          "doc_count" : 6
        },

6) Presenting Your Insights
a) Kibana overview and setup
b) Creating visualizations in Kibana
b) Creating dashboards in Kibana
