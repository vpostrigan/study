// Функции

// Объявление и вызов функций
// Обычно параметры функции аннотируются явно
// Возвращаемый тип подлежит выводу
function add(a: number, b: number) {
    return a + b;
}

// в JavaScript и TypeScript предлагается как минимум пять способов объявления функции:
// Именованная функция
function greet(name: string) {
    return 'hello ' + name
}
// Функциональное выражение
let greet2 = function (name: string) {
    return 'hello ' + name;
}
// Выражение стрелочной функции
let greet3 = (name: string) => {
    return 'hello ' + name
}
// Сокращенное выражение стрелочной функции
let greet4 = (name: string) =>
    'hello ' + name;
// Конструктор функции (не рекомендуется использовать)
let greet5 = new Function('name', 'return "hello " + name')


// Параметр — это часть данных, необходимых функции для запуска, объявленная как часть декларации этой функции.
// Также может называться формальным параметром.
// Аргумент — это часть данных, предаваемая функции при ее вызове.
// Также может называться актуальным параметром.

// При вызове функции в TypeScript не нужно предоставлять дополнительную информацию о типе — достаточно передать ей некий аргумент,
// и TypeScript проверит совместимости этого аргумента с типами параметров функции:
add(1, 2)        // вычисляется как 3
greet('Crystal') // выводится как 'hello Crystal'
// Если вы забыли аргумент или передали аргумент неверного типа, TypeScript поспешит на это указать:
add(1)              // Ошибка TS2554: ожидается 2 аргумента, но получен 1.
add(1, 'a')      // Ошибка TS2345: аргумент типа '"a"' не может быть присвоен параметру типа 'number'.
