REBUILDING WITHOUT THE CACHE

You want to rebuild your Dockerfile without using the cache.


Listing 4.5. Rebuilding with the cache
$ docker build .
Sending build context to Docker daemon  2.56 kB
Sending build context to Docker daemon
Step 0 : FROM node
 ---> 91cbcf796c2c
Step 1 : MAINTAINER ian.miell@gmail.com
 ---> Using cache                                1
  ---> 8f5a8a3d9240                              2
 Step 2 : RUN git clone -q https://github.com/docker-in-practice/todo.git
 ---> Using cache
 ---> 48db97331aa2
Step 3 : WORKDIR todo
 ---> Using cache
 ---> c5c85db751d6
Step 4 : RUN npm install > /dev/null
 ---> Using cache
 ---> be943c45c55b
Step 5 : EXPOSE 8000
 ---> Using cache
 ---> 805b18d28a65
Step 6 : CMD npm start
 ---> Using cache
 ---> 19525d4ec794
Successfully built 19525d4ec794                 3



$ docker build --no-cache .       // кеш не используется
$ docker build .                  // кеш используется

если изменить любую строку в Dockerfile.
после этой строки, кеш не будет использоватся
пример,
было
CMD ["npm", "start"]
стало
CMD ["npm", "start"] # bust the cache

// //

запрет кеширования с помощью build-args
WORKDIR todo
ARG CACHEBUST=no
RUN npm install

$ docker build --build-arg CACHEBUST=${RANDOM} .       // кеш не используется, после CACHEBUST
$ docker build .                                       // кеш используется

или дата
$ docker build --build-arg CACHEBUST=$(date +%s) .     // кеш не используется, после CACHEBUST

// //

запрет кеширования с помощью директивы ADD
FROM ubuntu:16.04
RUN apt-get install -y git ...
RUN git clone https://github.com/nodejs/node
WORKDIR node
RUN make && make install


FROM ubuntu:16.04
ADD https://api.github.com/repos/nodejs/node/commits /dev/null  # если код изменился, кеш не сработает со следующей строки
RUN got clone https://github.com/nodejs/node

пример
FROM ubuntu:16:04
ADD https://api.github.com/repos/torvalds/linux/commits /dev/null
RUN echo "Built at $(date)" >> /build_time

$ docker build -t linux_last_updated .
$ docker run linux_last_updated cat /build_time
